---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: traefik
  namespace: beta
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-beta
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik-beta
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-beta
rules:
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingressclasses
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - traefik.io
      - traefik.containo.us
    resources:
      - ingressroutes
      - ingressroutetcps
      - ingressrouteudps
      - middlewares
      - middlewaretcps
      - tlsoptions
      - tlsstores
      - traefikservices
      - serverstransports
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik-beta
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-beta
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-beta
subjects:
  - kind: ServiceAccount
    name: traefik
    namespace: beta
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik
  namespace: beta
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-beta
spec:
  replicas: 1
  selector:
    matchLabels:

      app.kubernetes.io/name: traefik
      app.kubernetes.io/instance: traefik-beta
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  minReadySeconds: 0
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "9100"
      labels:

        app.kubernetes.io/name: traefik
        app.kubernetes.io/instance: traefik-beta
    spec:
      serviceAccountName: traefik
      terminationGracePeriodSeconds: 60
      hostNetwork: false
      containers:
        - image: docker.io/traefik:v2.11.2
          imagePullPolicy: IfNotPresent
          name: traefik
          readinessProbe:
            httpGet:
              path: /ping
              port: 9000
              scheme: HTTP
            failureThreshold: 1
            initialDelaySeconds: 2
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /ping
              port: 9000
              scheme: HTTP
            failureThreshold: 3
            initialDelaySeconds: 2
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - name: metrics
              containerPort: 9100
              protocol: TCP
            - name: traefik
              containerPort: 9000
              protocol: TCP
            - name: web
              containerPort: 8000
              protocol: TCP
            - name: websecure
              containerPort: 8443
              protocol: TCP
            - name: tcp
              containerPort: 12093
              protocol: TCP

          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true

          volumeMounts:
            - name: letsencrypt
              mountPath: /letsencrypt
            - name: data
              mountPath: /data
            - name: tmp
              mountPath: /tmp

          args:
            - --global.checknewversion
            - --entrypoints.metrics.address=:9100/tcp
            - --entrypoints.traefik.address=:9000/tcp
            - --entrypoints.web.address=:8000/tcp
            - --entrypoints.websecure.address=:8443/tcp
            - --entrypoints.tcp.address=:12093/tcp

            - --api.dashboard=true
            - --ping=true
            - --metrics.prometheus=true
            - --metrics.prometheus.entrypoint=metrics
            - --metrics.prometheus.addEntryPointsLabels=true
            - --metrics.prometheus.addServicesLabels=true
            - --providers.kubernetescrd
            - --providers.kubernetesingress
            - --entrypoints.websecure.http.tls=true
            - --certificatesresolvers.hello-rodo-le.acme.email=rodolfo.giacomodonatto@sitrack.com
            - --certificatesresolvers.hello-rodo-le.acme.storage=/letsencrypt/acme.json
#            - --certificatesresolvers.playback-cert.acme.httpchallenge.entrypoint=web
#            - --certificatesresolvers.playback-cert.acme.dnsChallenge.provider=godaddy
            - --certificatesresolvers.hello-rodo-le.acme.tlschallenge=true
            - --certificatesresolvers.hello-rodo-le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory

            - --log.level=DEBUG
          env:
#            - name: GODADDY_API_KEY
#              valueFrom:
#                secretKeyRef:
#                  name: godaddy-api-secret
#                  key: api-key
#            - name: GODADDY_API_SECRET
#              valueFrom:
#                secretKeyRef:
#                  name: godaddy-api-secret
#                  key: api-secret

            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace

      volumes:
        - name: letsencrypt
          emptyDir: { }
#          persistentVolumeClaim:
#            claimName: letsencrypt-pvc
        - name: data
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      #      nodeSelector:
      #        ingress-ready: "true"
      #        kubernetes.io/os: linux
      securityContext:
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  annotations:
    ingressclass.kubernetes.io/is-beta-class: "true"
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-beta
  name: traefik
spec:
  controller: traefik.io/ingress-controller
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard
  namespace: beta
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: traefik-beta
spec:
  entryPoints:
    - traefik
  routes:
    - match: PathPrefix(`/dashboard`) || PathPrefix(`/api`)
      kind: Rule
      services:
        - name: api@internal
          kind: TraefikService

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: letsencrypt-pvc
  namespace: beta
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi